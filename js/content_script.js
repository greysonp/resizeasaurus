// Generated by IcedCoffeeScript 1.6.3-f
(function() {
  var Jaws, Main, Page, main,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };



  Jaws = (function() {
    Jaws.prototype.STATES = {
      HIDING: 1,
      HIDDEN: 2,
      PEEKING: 3,
      CHOMPING: 4
    };

    Jaws.prototype.HEIGHT = 100;

    Jaws.prototype.PEEK_TIME = 1000;

    Jaws.prototype.TRANSITION_TIME = 500;

    Jaws.prototype.CHOMP_COOLDOWN = 1000;

    Jaws.prototype.DONE_COOLDOWN = 2500;

    Jaws.prototype.TEETH_PERCENT = .3;

    Jaws.prototype.closed = false;

    Jaws.prototype.couldChomp = false;

    Jaws.prototype.doneTimer = null;

    function Jaws() {
      this.state = this.STATES.HIDDEN;
      $('body').prepend("<div id=\"monster-t\"></div>\n<div id=\"monster-b\"></div>");
      $('#monster-t').css("background-image", "url(" + chrome.extension.getURL("../img/jaws_top_1200.png") + ")");
      $('#monster-b').css("background-image", "url(" + chrome.extension.getURL("../img/jaws_bottom_1200.png") + ")");
    }

    Jaws.prototype.tween = function(percentClosed) {
      if (this.state === this.STATES.CHOMPING) {
        this.chompTween(percentClosed);
      } else if (this.state !== this.STATES.HIDING) {
        this.peek(percentClosed);
      }
    };

    Jaws.prototype.peek = function(percentClosed) {
      var pixelOffset;
      pixelOffset = percentClosed * this.HEIGHT - this.HEIGHT;
      this.state = this.STATES.PEEKING;
      $('#monster-t').css('top', pixelOffset);
      $('#monster-b').css('bottom', pixelOffset);
      if (percentClosed === 1) {
        this.closed = true;
        if (this.couldChomp) {
          this.chomp();
          this.couldChomp = false;
        }
      } else if (this.closed) {
        this.closed = false;
        this.couldChomp = true;
        this.startChompTimer();
      }
    };

    Jaws.prototype.chompTween = function(percentClosed) {
      var adjustedHeight, pixelOffset;
      adjustedHeight = this.HEIGHT * (1 - this.TEETH_PERCENT);
      pixelOffset = percentClosed * adjustedHeight - adjustedHeight;
      pixelOffset = pixelOffset > 0 ? 0 : pixelOffset;
      $('#monster-t').css('top', pixelOffset);
      $('#monster-b').css('bottom', pixelOffset);
      if (percentClosed === 1) {
        this.closed = true;
        if (this.couldChomp) {
          this.chomp();
          this.couldChomp = false;
          this.startDoneTimer();
        }
      } else if (this.closed) {
        this.closed = false;
        this.couldChomp = true;
      }
    };

    Jaws.prototype.chomp = function() {
      this.state = this.STATES.CHOMPING;
      this.resetDoneTimer();
      Main.page.wreck();
      console.log("CHOMP");
    };

    Jaws.prototype.hide = function() {
      var _this = this;
      this.state = this.STATES.HIDING;
      this.couldChomp = false;
      this.closed = false;
      this.hideHalf('#monster-t', 'top');
      this.hideHalf('#monster-b', 'bottom');
      setTimeout(function() {
        _this.state = _this.STATES.HIDDEN;
        _this.submitWreckage();
      }, this.TRANSITION_TIME);
    };

    Jaws.prototype.hideHalf = function(selector, property) {
      var props;
      props = {};
      props[property] = -this.HEIGHT;
      $(selector).animate(props, this.TRANSITION_TIME);
    };

    Jaws.prototype.reset = function() {
      if (this.state !== this.STATES.CHOMPING) {
        this.state = this.STATES.HIDDEN;
        $('#monster-t').css('top', -this.HEIGHT);
        $('#monster-b').css('bottom', -this.HEIGHT);
      }
    };

    Jaws.prototype.startChompTimer = function() {
      var _this = this;
      setTimeout(function() {
        _this.couldChomp = false;
      }, this.CHOMP_COOLDOWN);
    };

    Jaws.prototype.startDoneTimer = function() {
      var _this = this;
      if (this.doneTimer != null) {
        return;
      }
      this.doneTimer = setTimeout(function() {
        _this.hide();
      }, this.DONE_COOLDOWN);
    };

    Jaws.prototype.resetDoneTimer = function() {
      if (this.doneTimer != null) {
        clearTimeout(this.doneTimer);
        this.doneTimer = null;
        return this.startDoneTimer();
      }
    };

    Jaws.prototype.submitWreckage = function() {
      console.log("THIS SITE GOT WRECKED");
    };

    return Jaws;

  })();

  Page = (function() {
    Page.prototype.health = 100;

    Page.prototype.elements = [];

    Page.prototype.rotations = [];

    Page.THRESH_SQUISH = 50;

    Page.MIDPOINT = 0;

    Page.ROTATION_FACTOR = 10;

    Page.prototype.cleansed = false;

    Page.SQUISH_FACTOR = 1.3;

    Page.prototype.stage = null;

    Page.NUM_ROWS = 5;

    Page.NUM_COLS = 8;

    function Page(cb) {
      console.log("starting constructor");
      html2canvas(document.body, {
        "onrendered": function(canvas) {
          console.log("finished");
          $('body').prepend(canvas);
          $(canvas).hide();
          $(canvas).addClass('squish-canvas');
          cb();
        }
      });
    }

    Page.prototype.wreck = function() {
      if (!this.cleansed) {
        $('.squish-canvas').nextAll().remove();
        $('canvas').show();
        this.cleansed = true;
      }
      if (this.health > Page.THRESH_SQUISH) {
        this.squish();
      } else {
        this.explode();
      }
    };

    Page.prototype.squish = function() {
      $('canvas').css("height", $('canvas').height() / Page.SQUISH_FACTOR);
      $('canvas').css("top", $(document).height() / 2 - $('canvas').height() / 2);
      this.health -= 10;
    };

    Page.prototype.explode = function() {
      if (this.stage == null) {
        this.initStage();
      } else {
        this.pulse();
      }
    };

    Page.prototype.initStage = function() {
      var bitmap, dataUrl,
        _this = this;
      console.log("initStage()");
      this.stage = new createjs.Stage($('canvas')[0]);
      dataUrl = Canvas2Image.saveAsPNG($('canvas')[0], false, $(window).width(), $('canvas').height());
      $('body').append("<img id='data-img' src='" + dataUrl + "' />");
      bitmap = new createjs.Bitmap(document.getElementById('data-img'));
      bitmap.x = 200;
      bitmap.y = 200;
      bitmap.width = 200;
      this.stage.addChild(bitmap);
      createjs.Ticker.addEventListener("tick", function() {
        _this.stage.update();
        return console.log("Updated");
      });
    };

    Page.prototype.pulse = function() {
      console.log("pulse()");
    };

    return Page;

  })();

  Main = (function() {
    Main.MIN_WIDTH = 400;

    Main.MIN_HEIGHT = 200;

    Main.PEEK_THRESHOLD = 300;

    Main.page = null;

    function Main() {
      this.onResize = __bind(this.onResize, this);
      var _this = this;
      Main.page = new Page(function() {
        _this.jaws = new Jaws;
      });
      $(window).resize(this.onResize);
    }

    Main.prototype.onResize = function() {
      this.resizeHeight($(window).height());
      this.resizeWidth($(window).width());
    };

    Main.prototype.resizeHeight = function(height) {
      var percentClosed, pixelsToClose;
      if (height < Main.PEEK_THRESHOLD) {
        pixelsToClose = height - Main.MIN_HEIGHT;
        percentClosed = 1 - (pixelsToClose / (Main.PEEK_THRESHOLD - Main.MIN_HEIGHT));
        this.jaws.tween(percentClosed);
      } else {
        this.jaws.reset();
      }
    };

    Main.prototype.resizeWidth = function(width) {};

    return Main;

  })();

  main = new Main;

}).call(this);
